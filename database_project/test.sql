SET LINESIZE 200;


DROP TABLE SALES;
DROP TABLE SALSEMAN;
DROP TABLE PURCHASE;
DROP TABLE USERS;
DROP TABLE PRODUCTS;
DROP TABLE COMPANY;


CREATE TABLE COMPANY (
  C_NAME varchar(50) NOT NULL,
  ADDRESS varchar(50),
  PHONE varchar(20)
); 

ALTER TABLE COMPANY ADD PRIMARY KEY(C_NAME);

CREATE TABLE USERS (
  U_ID NUMBER NOT NULL,
  U_NAME varchar(50),
  U_ADDRESS varchar(100),
  SALARY NUMBER CHECK(SALARY >= 10000),
  C_NAME varchar(50) NOT NULL,
  PRIMARY KEY(U_ID),
  FOREIGN KEY(C_NAME) REFERENCES COMPANY ON DELETE CASCADE
);




CREATE TABLE PRODUCTS (
  P_NAME varchar(50),
  P_TYPE varchar(20),
  P_CODE varchar(10) NOT NULL,
  SELLING_PRICE NUMBER,
  P_EXPIRY varchar(20),
  QUANTITY NUMBER,
  PRIMARY KEY(P_CODE)
);



CREATE TABLE PURCHASE (
  P_CODE varchar(10) NOT NULL,
  C_NAME varchar(50) NOT NULL,
  PUR_CODE VARCHAR(100) NOT NULL,
  PRIMARY KEY(PUR_CODE),
  FOREIGN KEY(C_NAME) REFERENCES COMPANY ON DELETE CASCADE,
  FOREIGN KEY(P_CODE) REFERENCES PRODUCTS ON DELETE CASCADE
);




CREATE TABLE SALSEMAN (
   SALE_NAME VARCHAR(100),
   SALESMAN_ID NUMBER NOT NULL,
   PRIMARY KEY(SALESMAN_ID)
);



CREATE TABLE SALES(
 P_CODE varchar(10) NOT NULL,
 SALESMAN_ID NUMBER NOT NULL,
 FOREIGN KEY(P_CODE) REFERENCES PRODUCTS ON DELETE CASCADE,
 FOREIGN KEY(SALESMAN_ID) REFERENCES SALSEMAN ON DELETE CASCADE
);

-- TILL NOW GOOD


INSERT INTO COMPANY (C_NAME, ADDRESS, PHONE) VALUES ('Square', 'Dhaka', '12903');
INSERT INTO COMPANY (C_NAME, ADDRESS, PHONE) VALUES ('Navana', 'Gazipur', '01289078443');
INSERT INTO COMPANY (C_NAME, ADDRESS, PHONE) VALUES ('Elite', 'Chittagong', '010114367832');
INSERT INTO COMPANY (C_NAME, ADDRESS, PHONE) VALUES ('NAVANA', 'RANGPUR', '010114365892');
INSERT INTO COMPANY (C_NAME, ADDRESS, PHONE) VALUES ('MODERNA', 'BARISAL', '010130267832');




INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('MOBILE',  '3d00', 30, '26-DEC-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('LAPTOP',  '2Iaa',  40, '26-SEP-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('LAPTOP',  '2IaB',  80, '27-SEP-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('LAPTOP',  '2IaC',  300, '28-SEP-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('LAPTOP',  '2IaD',  100, '29-SEP-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('PC',  '2xaa',  80, '26-OCT-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('PC',  '2xab',  70, '27-OCT-2022'); 
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('PC',  '2xac',  100, '28-OCT-2022'); 
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('PC',  '2xad',  30, '29-OCT-2022'); 
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('BUSKET',  '2xBB',  90, '26-NOV-2022');
INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('SHAMPOO',  '2xCC',  100, '26-FEB-2022');




INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(100, 'NAJIB', 98000, 'Square');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1100, 'NAJIB2', 98000, 'Elite');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1200, 'NAJIB3', 98000, 'Navana');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1300, 'NAJIB4', 98000, 'MODERNA');

INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(101, 'PIAL', 78800, 'Navana');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(102, 'SADMAN',18000, 'Elite');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1102, 'SADMAN2',18000, 'Navana');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1202, 'SADMAN3',18000, 'Elite');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1302, 'SADMAN4',18000, 'Square');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(103, 'RONY', 93000, 'NAVANA');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1104, 'SOURAV', 58000, 'Square');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1204, 'SOURAV2', 58000, 'Elite');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1304, 'SOURAV3', 58000, 'Navana');
INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(1404, 'SOURAV4', 58000, 'MODERNA');

INSERT INTO USERS (U_ID, U_NAME, SALARY, C_NAME) VALUES(105, 'RATUL', 38000, 'MODERNA');




INSERT INTO SALSEMAN (SALESMAN_ID, SALE_NAME) VALUES(1001, 'MUKIM');
INSERT INTO SALSEMAN (SALESMAN_ID, SALE_NAME) VALUES(1002, 'TAJ');
INSERT INTO SALSEMAN (SALESMAN_ID, SALE_NAME) VALUES(1003, 'MAHIM');
INSERT INTO SALSEMAN (SALESMAN_ID, SALE_NAME) VALUES(1004, 'ZAFRUL');
INSERT INTO SALSEMAN (SALESMAN_ID, SALE_NAME) VALUES(1005, 'KOWDHIK');



INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4000', '3d00', 'Square');
INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4001', '2Iaa', 'Navana');
INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4002', '2xaa', 'Elite');
INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4003', '2xBB', 'NAVANA');
INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4004', '2xCC', 'MODERNA');
INSERT INTO PURCHASE (PUR_CODE, P_CODE, C_NAME) VALUES ('4005', '2xBB', 'MODERNA');


INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('3d00', 1001);
INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('2Iaa', 1002);
INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('2xaa', 1003);
INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('2xBB', 1004);
INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('2xCC', 1005);
INSERT INTO SALES (P_CODE, SALESMAN_ID) VALUES ('2xBB', 1005);

-- TILL GOOD














---------------Query Part-----------------


SELECT * 
FROM COMPANY;




------------------------------------------
SELECT U_NAME , SALARY 
FROM USERS
WHERE SALARY >= 50000
AND SALARY <= 80000;


-----------------------------------------------
-- __QUERY__ : DISTINCT COMPANY NAME

SELECT DISTINCT(C_NAME) AS COMPANY_NAME
                , SALARY
FROM USERS
WHERE SALARY >= 50000 AND SALARY <= 100000;                



-- ______LIKE (SUB STRING MATCH)_______ --
--QUERY : MATCHING COMPANY NAME TO GET USERS OF THIS COMPANY

SELECT DISTINCT(U_NAME) ,SALARY
FROM USERS
WHERE C_NAME LIKE '%NAVANA';



-- DESC OF COST --
SELECT U_NAME,C_NAME,SALARY
FROM USERS
ORDER BY SALARY DESC;



-- __QUERY__ : SELECT MAX COST OF PRODUCTS
SELECT P_NAME, MAX(SELLING_PRICE) AS PRODUCT_PRICE
FROM PRODUCTS
GROUP BY P_NAME;


-- _________ HAVING  ________ --
-- _____QUERY_____: SELECT PRODUCT COST GREATER THAN  50 AND LESS THAN 90
SELECT SUM(SELLING_PRICE) AS PRODUCT_COST, P_NAME
FROM PRODUCTS
GROUP BY (P_NAME)
HAVING SUM(SELLING_PRICE) >= 100 AND SUM(SELLING_PRICE) < 1000;



-- _________ HAVING  ________ --
-- ___ QUERY ___ : SELECT PRODUCT NAME WHICH HAVE MINIMUM COST GREATER THAN 80

SELECT P_NAME
FROM PRODUCTS
GROUP BY P_NAME
HAVING MIN(SELLING_PRICE) >= 80;






-- ________________ NESTED QUERY ________________ --

--___QUERY ___: FIND PRODUCT NAME AND PRODUCT ID WHICH HAVE BEEN PURCHASE FROM NAVANA COMPANY

SELECT P.P_NAME, P.SELLING_PRICE
FROM PRODUCTS P
WHERE P.P_CODE IN (SELECT P.P_CODE
                FROM PRODUCTS P, PURCHASE PS
                WHERE P.P_CODE = PS.P_CODE AND PS.C_NAME = 'MODERNA'
);





-- ________________ UNION (DISTINCT) QUERY ________________ --
--__QUERY__: SELECT PRODUCTS

SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE > 40
UNION
SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE < 40;


-- ________________ UNION ALL (DISTINCT) QUERY ________________ --


SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE > 40
UNION ALL
SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE < 40;




-- ________________ iNTERSECT (DISTINCT) QUERY ________________ --


SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE > 40
INTERSECT
SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE < 40;



-- ________________ MINUS (DISTINCT) QUERY ________________ --


SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE > 40
MINUS
SELECT P_NAME, P_CODE
FROM PRODUCTS
WHERE SELLING_PRICE < 40;



-- ________________ NATURAL JOIN QUERY ________________ --

SELECT P_NAME, PUR_CODE,P_EXPIRY
FROM PRODUCTS NATURAL JOIN PURCHASE;



-- ________________ CROSS JOIN QUERY ________________ --

SELECT P_NAME, P_EXPIRY, PUR_CODE, SALESMAN_ID
FROM PRODUCTS P CROSS JOIN PURCHASE PUR CROSS JOIN SALES S
WHERE P.P_CODE = PUR.P_CODE AND P.P_CODE = S.P_CODE;





-- ________________ LEFT OUTER JOIN QUERY ________________ --


SELECT P_NAME, P_EXPIRY, PUR_CODE
FROM PRODUCTS P LEFT OUTER JOIN PURCHASE PUR
ON P.P_CODE = PUR.P_CODE;



-- ________________ RIGHT OUTER JOIN QUERY ________________ --



SELECT P_NAME, P_EXPIRY, PUR_CODE
FROM PRODUCTS P RIGHT OUTER JOIN PURCHASE PUR
ON P.P_CODE = PUR.P_CODE;



-- ________________ FULL OUTER JOIN QUERY ________________ --



SELECT P_NAME, P_EXPIRY, PUR_CODE
FROM PRODUCTS P FULL OUTER JOIN PURCHASE PUR
ON P.P_CODE = PUR.P_CODE;



-- ________________ FULL OUTER JOIN QUERY ________________ --



SELECT P_NAME, P_EXPIRY, PUR_CODE
FROM PRODUCTS P INNER JOIN PURCHASE PUR
ON P.P_CODE = PUR.P_CODE;




-- ________________ **PL SQL**  ________________ --
-- __QUERY__ : find Maximum PRICE FOR PC PRODUCT

SET SERVEROUTPUT ON 
DECLARE 

PC_MAX PRODUCTS.SELLING_PRICE %TYPE;

P PRODUCTS.P_NAME %TYPE;
BEGIN
SELECT MAX(SELLING_PRICE),P_NAME INTO PC_MAX,P
FROM PRODUCTS
WHERE P_NAME = 'PC'
GROUP BY P_NAME;

DBMS_OUTPUT.PUT_LINE('MAX PRICE FOR PC: ' || PC_MAX || ' PRODUCT CODE: ' || P);

END;

/ 




 -- ________________ **PL SQL**  ________________ --
-- ________________ *** PROCEDURE and CURSOR ***  ________________ --


SET SERVEROUTPUT ON

CREATE OR REPLACE PROCEDURE GETALLPRODUCTNAME IS

CURSOR PRODUCT_CURSOR IS SELECT PRODUCTS.P_NAME, P_CODE, PURCHASE.C_NAME, PURCHASE.PUR_CODE FROM PRODUCTS NATURAL JOIN PURCHASE;

EACH_RECORD PRODUCT_CURSOR %ROWTYPE;

BEGIN 
OPEN PRODUCT_CURSOR;
LOOP
FETCH PRODUCT_CURSOR INTO EACH_RECORD;
EXIT WHEN PRODUCT_CURSOR%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(
  'P_NAME: ' || EACH_RECORD.P_CODE || '   P_CODE: ' || EACH_RECORD.P_CODE || '  C_NAME:  ' || EACH_RECORD.C_NAME || '  PUR_CODE: ' || EACH_RECORD.PUR_CODE
);

END LOOP;

CLOSE PRODUCT_CURSOR;

END;
/

SHOW ERROR;




BEGIN
GETALLPRODUCTNAME;
END;
/




 -- ________________ **PL SQL**  ________________ --
-- ________________ *** FUNCTION ***  ________________ --

SET SERVEROUTPUT ON

CREATE OR REPLACE FUNCTION GETUSER_NAME (userID IN USERS.U_ID%TYPE) RETURN USERS.U_NAME%TYPE IS

USER_NAME  USERS.U_NAME%TYPE;

BEGIN 
SELECT U_NAME INTO USER_NAME
FROM USERS
WHERE   userID = USERS.U_ID;

RETURN USER_NAME;

END;
/

SHOW ERROR;


BEGIN 

DBMS_OUTPUT.PUT_LINE('USER NAME: ' || GETUSER_NAME(100));

END;
/





-- ************************************* TRIGGER ************************************ --


CREATE OR REPLACE TRIGGER addNewProduct  BEFORE INSERT OR UPDATE ON PRODUCTS
FOR EACH ROW
BEGIN 

IF :NEW.SELLING_PRICE < 10 OR :NEW.SELLING_PRICE > 100 THEN
  RAISE_APPLICATION_ERROR(-2000,'GIVE');
END IF;

END;
/

SHOW ERROR;



INSERT INTO PRODUCTS (P_NAME, P_CODE, SELLING_PRICE, P_EXPIRY) VALUES('SHAMPOO',  '2xCF',  500, '26-FEB-2022');




-- ************************************* DATE ************************************ --

SELECT P_EXPIRY
FROM PRODUCTS 
WHERE SYSDATE-TO_DATE(P_EXPIRY) <=200;



---------------VIEW-------------------

DROP TABLE EXPIRY_LIST;

CREATE VIEW EXPIRY_LIST AS

SELECT P_NAME, P_EXPIRY 
FROM PRODUCTS 
WHERE SYSDATE-TO_DATE(P_EXPIRY) <=200;

